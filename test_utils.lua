local luaunit = require( "luaunit")

local m_u = require( "utils")


function test_bytesToFloat32()
    luaunit.assertAlmostEquals( m_u.bytesToFloat32( {0x00, 0x00, 0x00, 0x00}), 0.0)
    luaunit.assertAlmostEquals( m_u.bytesToFloat32( {0x20, 0xb2, 0x96, 0x49}), 1234500.0)
    luaunit.assertAlmostEquals( m_u.bytesToFloat32( {0x2c, 0x52, 0x9a, 0x44}), 1234.56789, 0.001)
    luaunit.assertAlmostEquals( m_u.bytesToFloat32( {0x2c, 0x52, 0x9a, 0xc4}), -1234.56789, 0.001)
end

function test_bytesToDouble()
    luaunit.assertAlmostEquals( m_u.bytesToDouble( {0x00, 0x00, 0x00, 0x00, 0x44, 0xd6, 0x32, 0xc1}), -1.2345e6)
    luaunit.assertAlmostEquals( m_u.bytesToDouble( {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xbf}), -1)
    luaunit.assertAlmostEquals( m_u.bytesToDouble( {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}), 0.0)
    luaunit.assertAlmostEquals( m_u.bytesToDouble( {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f}), 1)
    luaunit.assertAlmostEquals( m_u.bytesToDouble( {0x00, 0x00, 0x00, 0x00, 0x44, 0xd6, 0x32, 0x41}), 1.2345e6)
    luaunit.assertAlmostEquals( m_u.bytesToDouble( {0x58, 0xa4, 0x0c, 0x54, 0x34, 0x6f, 0x9d, 0xc1}), -123456789.0123456789)
    luaunit.assertAlmostEquals( m_u.bytesToDouble( {0x58, 0xa4, 0x0c, 0x54, 0x34, 0x6f, 0x9d, 0x41}), 123456789.0123456789)
end

function test_strToBuf()
    local str = "DEAD BEEF"
    luaunit.assertEquals( m_u.strToBuf( str), {0x44, 0x45, 0x41, 0x44, 0x20, 0x42, 0x45, 0x45, 0x46})
end

function test_bufToStr()
    local buffer = {0x44, 0x45, 0x41, 0x44, 0x20, 0x42, 0x45, 0x45, 0x46}
    luaunit.assertEquals( m_u.bufToStr( buffer), "DEAD BEEF")
end

os.exit( luaunit.LuaUnit.run() )
